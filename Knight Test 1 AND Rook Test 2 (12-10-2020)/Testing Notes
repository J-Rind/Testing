Knight Test 1

1. Can successfully create pieces objects. (CORRECT)
    Created two white and two black KNIGHT pieces objects.
            Knight whiteKnight1 = new Knight(1,0,"WhiteKnight1",true);
            Knight whiteKnight2 = new Knight(6,0,"WhiteKnight2",true);
            Knight blackKnight1 = new Knight(1,7,"BlackKnight1",true);
            Knight blackKnight2 = new Knight(6,7,"BlackKnight2",false);

2. When the knight was created, the range is NOT set correctly since the movements don't function as intended (NON FUNCTIONAL)

    Knight whiteKnight1 = new Knight(1,0,"WhiteKnight1",true);
    whiteKnight1.moveTo(2,2,whiteKing,testPieces);

    The above code should move the Knight to the location but it fails.
    I tried using other coordinates for other Knights as well but they failed to function correctly.

3. Unable to test if the piece can jump over other pieces (NON FUNCTIONAL)
    Since the knight is unable to move, can not confirm if it works as intended.

I will conduct another test if there is an update in the code or once I receive more details.
    For now, the knight doesn't move as intended.
    In fact, I even tried using INCORRECT coordinates for a knight such as only one step forward but it still fails to move.
	
	The pawns I created to test the Knight Jump has similar issues. 



Rook Test 2

1. Can successfully create Rook Pieces. (CORRECT)
    Created two white and two black Rook pieces objects.
            Rook whiteRook1 = new Rook(0,0,"White Rook 1", true);
            Rook whiteRook2 = new Rook(7,0,"White Rook 2", true);
            Rook blackRook1 = new Rook(0,7,"Black Rook 1", false);
            Rook blackRook2 = new Rook(7,7,"Black Rook 2", false);

2. When the rook is created, the range is set correctly and the movements function as intended (CORRECT)

    // Expected to move
            whiteRook1.moveTo(0,3,whiteKing,testPieces);
            blackRook1.moveTo(3,7,blackKing,testPieces);
            blackRook1.moveTo(0,5,blackKing,testPieces);

    // Not expected to move
            whiteRook1.moveTo(-1,0,whiteKing,testPieces);

3. Tested if the rook was restricted from jumping over other pieces (CORRECT)
    The rook was unable to jump over other pieces which is how it should be.

4. Tested if the rook can not move to invalid coordinates (CORRECT)

5. Tested to see if the rook can destroy other pieces. (NON FUNCTIONAL)
            blackRook1.moveTo(0,3,blackKing,testPieces);
            blackKing.updateRange(testPieces);
            whiteRook1.moveTo(0,3,whiteKing,testPieces);
            blackRook1.print();
            whiteRook1.print();

            The isAlive status for both remained to 'true' after moving the white rook 1 to the black rook 1's coordinate.
            The print() shows the same coordinates for both pieces now instead of removing the black rook and switching the isAlive to 'false'
